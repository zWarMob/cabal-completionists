const { SlashCommandBuilder } = require('@discordjs/builders');
const { MessageActionRow, MessageSelectMenu } = require('discord.js');

module.exports = (items) => {
	let command = new SlashCommandBuilder()
	.setName('needs1')
	.setDescription('Tells you who needs the item');
	// command.addSubcommandGroup((scg) => {
    //     scg.setName("wants")
    //     .setDescription("item you have");
    //     // for(item of items){
	// 	// 	var dci = item.toLowerCase()
	// 	// 				.replaceAll("(","")
	// 	// 				.replaceAll(")","")
	// 	// 				.replaceAll(" ", "-")
	// 	// 				.replaceAll("'", "-")
	// 	// 				.replaceAll("+", "");
    //     //     scg.addSubcommand(c=>c.setName(dci).setDescription(item));
    //     // }
	// 	return scg;
	// });
	return {
		data: command,
		async execute(interaction) {
			console.log(interaction);
			if (!interaction.isCommand()) return;
			//https://discordjs.guide/interactions/replying-to-slash-commands.html#subcommands
			// const need = interaction.options.getString('needs');
			const subcom = interaction.options.getSubcommand(); 
			
			if(subcom=="upgradecorelow"){
				return interaction.reply("DanViesel needs " + subcom)
			}else if(subcom=="upgradecoremedium"){
				return interaction.reply("Bushido needs Upgrad Core Medium")
			}else if(subcom=="upgradecorehigh"){
				return interaction.reply("Lowdeff needs Upgrade Core High")
			}else{
				return interaction.reply("Really? You need me? <3 ty")
			}
			// const row = new MessageActionRow()
			// .addComponents(
			// 	new MessageSelectMenu()
			// 		.setCustomId('select')
			// 		.setPlaceholder('Nothing selected')
			// 		.addOptions(testOpts.slice(0,25)),
			// );
			// const row2 = new MessageActionRow()
			// .addComponents(
			// 	new MessageSelectMenu()
			// 		.setCustomId('select2')
			// 		.setPlaceholder('Nothing selected')
			// 		.addOptions(testOpts.slice(25,50)),
			// );
			// const row3 = new MessageActionRow()
			// .addComponents(
			// 	new MessageSelectMenu()
			// 		.setCustomId('select3')
			// 		.setPlaceholder('Nothing selected')
			// 		.addOptions(testOpts.slice(25,50)),
			// );
			// const row4 = new MessageActionRow()
			// .addComponents(
			// 	new MessageSelectMenu()
			// 		.setCustomId('select4')
			// 		.setPlaceholder('Nothing selected')
			// 		.addOptions(testOpts.slice(25,50)),
			// );
			// const row5 = new MessageActionRow()
			// .addComponents(
			// 	new MessageSelectMenu()
			// 		.setCustomId('select5')
			// 		.setPlaceholder('Nothing selected')
			// 		.addOptions(testOpts.slice(25,50)),
			// );
	
			// await interaction.reply({ content: 'Pong!', components: [row,row2,row3,row4,row5] });
		},
	};
}